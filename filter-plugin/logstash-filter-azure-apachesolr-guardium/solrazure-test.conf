input {
  generator {
type => "solr_azure"
lines => [
"2022-02-09 06:31:31.397 INFO  (qtp234250762-18) [   x:demo_collection] o.a.s.u.p.LogUpdateProcessorFactory [demo_collection]  webapp=/solr path=/update params={commitWithin=1000&overwrite=true&wt=json&_=1644230869164}{add=[400 (1724266097036754944)]} 0 3",
"2022-02-09 06:49:31.070 INFO  (qtp234250762-22) [c:techproducts s:shard2 r:core_node8 x:techproducts_shard2_replica_n6] o.a.s.c.S.Request [demo_collection]  webapp=/solr path=/select params={q=id:401&_=1644230860222} hits=1 status=0 QTime=0",
"2022-02-09 06:44:21.089 ERROR (qtp234250762-19) [   x:demo_collection] o.a.s.h.RequestHandlerBase org.apache.solr.common.SolrException: Expected: OBJECT_START but got STRING at [2]",
"2022-03-24 11:56:22.486 INFO  (qtp2005169944-57) [   ] o.a.s.s.HttpSolrCall [admin] webapp=null path=/admin/cores params={name=Solr_sample_core&action=CREATE&instanceDir=Solr_sample_core&wt=json} status=0 QTime=2167"
]
count => 1 
}
}  
filter{
if [type] == "solr_azure" 
{
if "o.a.s.u.p.LogUpdateProcessorFactory" in [message] {
grok {
match => {"message" => "%{TIMESTAMP_ISO8601:timestamp}\s%{LOGLEVEL:event_type}\s\s(?<logtype>[^\s]*)\s\[\s*(?<collection>[^\]]*)\]\s(?<class_name>[^\s]*)\s\[(?<core>[^\s\]]*)\]\s\s(?<app_type>[^\s]*)=(?<app_value>[^\s]*)\s(?<path_type>[^\s]*)=(?<path_value>[^\s]*) (?<query_type>[^{]*)%{GREEDYDATA:query_value} %{INT:constant} %{NUMBER:interval}"
}
}
}
else if "o.a.s.c.S.Request" in [message] and "path=/select" in [message] or "path=/query" in [message] or "path=/terms" in [message] or "path=/get" in [message] and "params={distrib=false" not in [message] or "path=/spell" in [message] or "path=/export" in [message] or "o.a.s.s.HttpSolrCall" in [message]
{
grok {
match => {"message" => ["%{TIMESTAMP_ISO8601:timestamp}\s%{LOGLEVEL:event_type}\s\s(?<logtype>[^\s]*)\s\[\s*(?<collection>[^\]]*)\]\s(?<class_name>[^\s]*)\s\[(?<core>[^\s\]]*)\]\s*(?<app_type>[^\s]*)=(?<app_value>[^\s]*)\s(?<path_type>[^\s]*)=(?<path_value>[^\s]*) (?<query_type>[^{]*)%{DATA:query_value}\s%{GREEDYDATA:executionvalues}"
]
}
}
}
else
{
grok {
match => {"message" => [
"%{TIMESTAMP_ISO8601:timestamp}\s%{LOGLEVEL:event_type}\s(?<logtype>[^\s]*)\s\[\s*(?<collection>[^\]]*)\]\s%{GREEDYDATA:error_value}"
]
}
}
}
if "_grokparsefailure"  in [tags]{
drop { }
    }
apache_solr_azure_connector {}
}
}
output{
stdout{ codec => rubydebug }
}