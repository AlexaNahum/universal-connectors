filter{
if [type] == "filebeat" and "guc_filter_param_datasource_tag" in [tags]{
  mutate {
    add_field => { "server_ip" => "%{[host][ip][0]}" } 
	add_field => { "server_os" => "%{[host][os][name]}" }
	add_field => { "serverHostName" => "%{[host][hostname]}" }	
	}
if "o.a.s.u.p.LogUpdateProcessorFactory" in [message] {
grok {
match => {"message" => "%{TIMESTAMP_ISO8601:timestamp}\s%{LOGLEVEL:event_type}\s\s(?<logtype>[^\s]*)\s\[\s*(?<collection>[^\]]*)\]\s(?<class_name>[^\s]*)\s\[(?<core>[^\s\]]*)\]\s\s(?<app_type>[^\s]*)=(?<app_value>[^\s]*)\s(?<path_type>[^\s]*)=(?<path_value>[^\s]*) (?<query_type>[^{]*)%{GREEDYDATA:query_value} %{INT:constant} %{NUMBER:interval}"
}
}
}
else if "o.a.s.c.S.Request" in [message] and "path=/select" in [message] or "path=/query" in [message] or "path=/terms" in [message] or "path=/get" in [message] and "params={distrib=false" not in [message] or "path=/spell" in [message] or "path=/export" in [message] or "o.a.s.s.HttpSolrCall" in [message]
{
grok {
match => {"message" => ["%{TIMESTAMP_ISO8601:timestamp}\s%{LOGLEVEL:event_type}\s\s(?<logtype>[^\s]*)\s\[\s*(?<collection>[^\]]*)\]\s(?<class_name>[^\s]*)\s\[(?<core>[^\s\]]*)\]\s*(?<app_type>[^\s]*)=(?<app_value>[^\s]*)\s(?<path_type>[^\s]*)=(?<path_value>[^\s]*) (?<query_type>[^{]*)%{DATA:query_value}\s%{GREEDYDATA:executionvalues}"
]
}
}
}
else
{
grok {
match => {"message" => [
"%{TIMESTAMP_ISO8601:timestamp}\s%{LOGLEVEL:event_type}\s(?<logtype>[^\s]*)\s\[\s*(?<collection>[^\]]*)\]\s%{GREEDYDATA:error_value}"
]
}
}
}
if "_grokparsefailure"  in [tags]{
drop { }
    }
apache_solr_azure_connector {}
}
}